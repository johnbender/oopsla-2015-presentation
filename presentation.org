#+REVEAL_HEAD_PREAMBLE: <link rel="stylesheet" type="text/css" href="assets/style.css" />
#+REVEAL_ROOT: https://cdnjs.cloudflare.com/ajax/libs/reveal.js/3.1.0/
#+REVEAL_THEME: solarized
#+REVEAL_TRANS: none
#+REVEAL_SLIDE_NUMBER: t
#+REVEAL_HLEVEL: 10
#+EXPORT_FILE_NAME: index
#+TITLE: Declarative Fence Insertion
#+AUTHOR:
#+EMAIL: johnbender@cs.ucla.edu
#+OPTIONS: num:nil toc:nil reveal_history:t reveal_control:nil reveal_mathjax:t
* A Savage Optimization
** Recipe for PB&J
   | chef 1              |
   |---------------------|
   | get bread           |
   | apply peanut butter |
   | apply jelly         |
   | close halves        |
** Delayed PB? Optimize.
   | chef 1                |
   |-----------------------|
   | get bread             |
   | apply jelly           |
   | ! apply peanut butter |
   | close halves          |

* Concurrent Failure
** A Delicate Activity
   | chef 1              | chef 2       |
   |---------------------+--------------|
   | get bread           |              |
   | apply peanut butter |              |
   | apply jelly         |              |
   |                     | check jelly  |
   |                     | close halves |

** Delayed PB? Optimâ€” oh.
   | chef 1                | chef 2       |
   |-----------------------+--------------|
   | get bread             |              |
   | apply jelly           |              |
   |                       | check jelly  |
   |                       | close halves |
   | ! apply peanut butter |              |

* Dekker's Mutex
** Simple Implementation
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
  if(flag1 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC
  #+BEGIN_SRC c
bool p1() {
  flag1 = 1;
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** Simple Implementation
  #+BEGIN_SRC c
bool p0() {
! flag0 = 1;
! if(flag1 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC
  #+BEGIN_SRC c
bool p1() {
! flag1 = 1;
! if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** Sequential Consistency
   | P0        | P1          |
   |-----------+-------------|
   | ~flag1=1~ |             |
   | ~flag0:0~ |             |
   |           | ~flag0=1~   |
   |           | ! ~flag1:1~ |
   |           | return      |
   | enter     |             |

** Buffered Store (~flag1~)
   | P0        | P1          |
   |-----------+-------------|
   | ~flag1=1~ |             |
   | ~flag0:0~ |             |
   |           | ~flag0=1~   |
   |           | ! ~flag1:0~ |
   |           | enter       |
   | enter     |             |
** Buffered Store (~flag1~)
   | P0          | P1        |
   |-------------+-----------|
   | ~flag0:0~   |           |
   | ! ~flag1=1~ |           |
   |             | ~flag0=1~ |
   |             | ~flag1:1~ |
   |             | return    |
   | enter       |           |
** Buffered Store (~flag1~)
   | P0          | P1        |
   |-------------+-----------|
   | ~flag0:0~   |           |
   |             | ~flag0=1~ |
   | ! ~flag1=1~ |           |
   |             | ~flag1:1~ |
   |             | return    |
   | enter       |           |
** Buffered Store (~flag1~)
   | P0          | P1        |
   |-------------+-----------|
   | ~flag0:0~   |           |
   |             | ~flag0=1~ |
   |             | ~flag1:0~ |
   | ! ~flag1=1~ |           |
   |             | ! enter   |
   | enter       |           |
** Buffered Store (~flag1~)
   | P0          | P1        |
   |-------------+-----------|
   | ~flag0:0~   |           |
   |             | ~flag0=1~ |
   |             | ~flag1:0~ |
   |             | ! enter   |
   | ! ~flag1=1~ |           |
   | enter       |           |

** Fixed
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
! __asm__ ("mfence");
  if(flag1 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC
  #+BEGIN_SRC c
bool p1() {
  flag1 = 1;
! __asm__ ("mfence");
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

* The Problem
** What we want:
   - sc semantics
   - x-platform
   - performance
** What we don't want:
   - actual sc
   - user intervention

** Semantics != SC
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
  __asm__ ("mfence");
  if(flag0 == 1){
    return false;
  }
  // !! no fences required
  return true;
}
  #+END_SRC

** Cross Platform
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
  __asm__ ("mfence");
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** Cross Platform
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
  __asm__ ("dmb");
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** Fence Selection
  #+BEGIN_SRC c
bool p0() {
  flag0 = 1;
  __asm__ ("dmb st");
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** Existing Fences(-likes)
  #+BEGIN_SRC c
bool p0() {
  CAS(&flag0, 0, 1);
  // fence unnecessary
  if(flag0 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC

** TL2 STM Algorithm
   #+BEGIN_SRC c
...
# ifndef TL2_EAGER
#   ifdef TL2_OPTIM_HASHLOG
for (wr = logs; wr != end; wr++)
#   endif
{
  // write the deferred stores
  WriteBackForward(wr);
}
# endif

// make stores visible before unlock
MEMBARSTST();

// release locks and increment version
DropLocks(Self, wv);

// ensure loads are from global writes
MEMBARSTLD();

return 1;
...
   #+END_SRC

** Fence Macros
   #+BEGIN_SRC c
...
# ifndef TL2_EAGER
#   ifdef TL2_OPTIM_HASHLOG
for (wr = logs; wr != end; wr++)
#   endif
{
  // write the deferred stores
  WriteBackForward(wr);
}
# endif

// make stores visible before unlock
> MEMBARSTST();

// release locks and increment version
DropLocks(Self, wv);

// ensure loads are from global writes
> MEMBARSTLD();

return 1;
...
   #+END_SRC
** Loops
   #+BEGIN_SRC c
...
# ifndef TL2_EAGER
#   ifdef TL2_OPTIM_HASHLOG
for (wr = logs; wr != end; wr++)
#   endif
{
  // write the deferred stores
  > WriteBackForward(wr);
  > // this might be bad place
}
# endif

// make stores visible before unlock
MEMBARSTST();

// release locks and increment version
DropLocks(Self, wv);

// ensure loads are from global writes
MEMBARSTLD();

return 1;
...
   #+END_SRC
** Unnecessary
   #+BEGIN_SRC c
...
# ifndef TL2_EAGER
#   ifdef TL2_OPTIM_HASHLOG
for (wr = logs; wr != end; wr++)
#   endif
{
  // write the deferred stores
  WriteBackForward(wr);
}
# endif

// unnecessary ifdef TL2_EAGER
> MEMBARSTST();

// release locks and increment version
DropLocks(Self, wv);

// ensure loads are from global writes
MEMBARSTLD();

return 1;
...
   #+END_SRC
* Our Approach
** Order Specifications
   - order: relation between instructions
   - account for loops, overlaps, etc
   - platform agnostic
   - annotation vs inference
** Dekker
   ${st(\mathtt{flag0}) \rightarrow ld(\mathtt{flag1})}$
   #+BEGIN_SRC c
bool p0() {
> flag0 = 1;
|
> if(flag1 == 1){
    return false;
  }
  // !! critical
  return true;
}
  #+END_SRC
** TL2 STM
  #+BEGIN_SRC c
    ...
    # ifndef TL2_EAGER
    #   ifdef TL2_OPTIM_HASHLOG
    for (wr = logs; wr != end; wr++)
    #   endif
    {
      // write the deferred stores
  >   WriteBackForward(wr);
  | }
  | # endif
  |
  | // unnecessary ifdef TL2_EAGER
  | MEMBARSTST();
  |
  |  // release locks and increment version
> > DropLocks(Self, wv);
|
|   // ensure loads are from global writes
|   MEMBARSTLD();
|
>   return 1;
    ...
   #+END_SRC
** TL2 STM
   - ${st(\mathtt{addr}) \rightarrow ld(\mathtt{lock_{addr}})}$
   - ${st(\mathtt{lock_{addr}}) \rightarrow ld(*)}$

** Value
   - declarative
   - exact
   - often included
   - effective
* Related Work
** Recovering sequential consistency
   - Don't Sit on the Fence [Alglave]
   - Hiding relaxed memory consistency with a compiler [Lee]
   - all, whole program
** Enforcing arbitrary properties
   - Automatic inference of memory fences [Kuperstein]
   - Synthesis of memory fences via refinement propagation [Meshman]
   - all, whole program


* Thanks!
